ArrayList
有序、可重复、非线程安全
数据结构，初始化容量10
扩容：新容量=旧容量+旧容量*0.5
多线程同时写操作的时候，可能会报ConcurrentModificationException

Vector / Collections.synchroinzedList / CopyOnWriteArrayList
CopyOnWriteArrayList
有序、可重复、线程安全
数据组结构，初始化容量0，volatile修饰
扩容：新容量=旧容量+1
读写分离，只对写加锁（ReentrantLock）
问题：
	1、由于扩容机制（每次数组长度加1）
	在频繁写时，会导致数组来回复制，数据量大的时候，
	对内存消耗比较大，导致频繁YGC
	2、由于只对写加锁，所以不能保证读取数据的实时性，只能保证最终一致性

LinkedList
双端链表结构、有序、可重复、非线程安全
get方法：会根据索引在链表的位置，进行二分搜索

HashSet
HashMap实现、无序、不可重复、非线程安全
元素存放在key的位置，value为Object常量

CopyOnWriteArraySet
CopyOnWriteArrayList实现、有序、不可重复、线程安全

HashMap
数组+链表+红黑树实现、无序、key不可重复、非线程安全
默认长度：16，2的幂
默认负载因子：0.75，可以大于1，太低容易造成空间浪费，太高hash冲突几率大
扩容阈值 = 数组长度 * 负载因子
默认最大长度：2的30次方
转换红黑树阈值：8
	泊松分布，链表长度为8的概率是0.00000006，几乎不可能发生
	泊松分布：单位时间内随机事件发生的次数的概率分布
转换链表阈值：6，
	为什么是6？转红黑树是8，所以避开7，7、8太近
	如果频繁操作，有可能导致频繁在树与链表之间转换，消耗比较大
put方法：
	1、计算key的hash值：hash = key.hash ^ (key.hash >>> 16)
	2、判断数组是否为null，如果为null或空，则扩容数组
	3、计算索引位置：index = hash & (len-1)
	4、判断索引位置是否为null，若为null，创建新节点放入数组
	5、不为null，证明发生hash碰撞
	6、判断数组元素的hash和key是否相等，相等则取出数组元素
	7、否则数组元素为树节点时，进入树的put操作
	8、否则数组元素为链表节点，遍历链表，查找hash和key均相等元素，若没找到
		则生成新元素插入链表尾部，
		判断链表长度是否 >=8，
			如果数组长度小于64，则扩容数组
			否则将链表转换为红黑树
	9、hash和key均相等的元素，进行新值覆盖旧值
	10、判断数组大小是否超过容量阈值，超过则进行扩容
resize方法（扩容）：
	1、计算新数组长度：新长 = 旧长 * 2，新阈值 = 新长 * 0.75
	2、遍历旧table，如果元素next元素为null，当前元素重新计算索引放入新的位置
	3、当前元素为树节点，把原树切割成高低两颗树，
		低树挂在新数组的原索引位置，
		高树的位置 = 原索引位置 + 原数组长度
	4、当元素为链表节点，把原链表切成高低两条链表
		低链表挂在新数组的原索引位置，
		高链表的位置 = 原索引位置 + 原数组长度
	注：切分属于高树还是低树，取决于元素hash值与原数组长度是否等于0
		hash & 旧长度，等于0放在原位置，否则，放新索引位置
	
TreeMap
红黑树、有序、非线程安全

--------------------------------------------
ArrayBlockingQueue
数组实现、队列长度不可变
独占锁模式采用公平、还是非公平，构造方法可以指定。非公平吞吐量好
全局一把ReentrantLock锁，两个Condition条件

LinkedBlockingQueue
链表实现
队列长度为 Integer.MAX_VALUE（2的31次方-1，约为21亿4千7百多万）
使用的时候推荐在构造方法指定 适当 的长度，以免发生OOM
队首、队尾各一把ReentrantLock锁，各一个Condition条件

ConcurrentLinkedQueue
链表实现、没有长度限制、非阻塞
CAS保证线程安全

--------------------------------------------
Executors
1、固定数量：newFixedThreadPool(int)
2、单线程：newSingleThreadExecutor()
3、最大线程数量：newCacheThreadPool(); //Integer.max_value

submit有返回值（阻塞），execute没有

new ThreadPoolExecutor(7大参数)：
1、核心线程数
2、最大线程数（队列阻塞时，会扩容，立即执行）
3、扩容线程最大空闲时间（超过空闲，会缩容）
4、空闲时间单位
5、阻塞队列（new LinkedBlockingQueue(int)）
6、线程创建工厂
7、失败拒绝策略（队列阻塞且无法继续扩容时发生）
	1、抛异常，阻止程序执行
	2、退回给调用线程执行
	3、丢弃不执行
	4、丢失队列中等待时间更久的
	5、自定义 RejectedExecutionHandler

线程池的工作原理
1、在创建线程池后，等待提交过来的任务请求
2、当调用execute()方法添加一个请求任务时，线程池会做如下判断：
  1、如果正在运行的线程数量小于核心线程数（corePoolSize），那么马上创建线程运行这个 任务
  2、如果正在运行的线程数量大于或等于核心线程数（corePoolSize），那么将这个任务放入阻塞队列
  3、如果这时候队列满了，且正在运行的线程数量小于最大线程数（maximumPoolSize），那么创建非核心线程，并立即运行这个任务（这里类似于非公平锁）
  4、如果这时候队列满了，且正在运行的线程数量大于或等于最大线程数（maximumPoolSize），那么线程池会启动饱和拒绝策略来执行
3、当一个线程完成任务时，它会从队列中取出下一个任务来执行
4、当一个线程无事可做，且超过一定的时间（keepAliveTime）时，线程池会判断：
	如果当前运行的线程数大于核心线程数（corePoolSize），那么这个线程就会被停掉
	线程池的所有任务完成后，它最终会收缩到核心线程数（corePoolSize）的大小























